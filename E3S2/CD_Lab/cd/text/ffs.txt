//first
#include<stdio.h>
#include<ctype.h>
#include<stdbool.h>

char productionSet[10][10];
int size;
void first(char *,char);
void addToresultSet(char *,char);

void first(char *result,char c){
	
	result[0] = '\0';
	char subresult[10];
	subresult[0] = '\0';
	
	if(!(isupper(c))){
		addToresultSet(result,c);
		return;
	}	
	
	int i = 0;
	
	for(i = 0; i < size; i++){
		
		if(productionSet[i][0] == c){
		
			if(productionSet[i][2] == '$'){
				addToresultSet(result,'$');
				return;
			} else{
				
				int j = 2;
				
				while(productionSet[i][j] != '\0'){
					
					first(subresult,productionSet[i][j]);
					
					int k;
					for(k = 0; subresult[k] != '\0'; k++){
						addToresultSet(result,subresult[k]);
					}		
					
					bool foundepsilon = false;
					
					for(k = 0; subresult[k] != '\0'; k ++){
						
						if(subresult[k] == '$'){
							foundepsilon = true;
							break;
						}	
							
					}
					
					if(!foundepsilon){
						break;
					}
						
					j ++;
				}
				
			}
			
		} 	
		
	}
	
	return;
	
}

void addToresultSet(char result[],char ch){
	
	int k;
	
	for(k = 0; result[k] != '\0'; k++){
		
		if(result[k] == ch){
			return;
		}	
		
	}	
	
	result[k] = ch;
	result[k + 1] = '\0';
}

void main(){
	
	printf("Enter the number of productions: ");
	scanf("%d",&size);
	
	int i;
	for(i = 0; i < size; i++){
		printf("Enter the production %d: ",i + 1);
		scanf("%s",productionSet[i]);	
	}
	
	char choice,c;
	char result[20];
	
	do{
	
		printf("First of: ");
		
		while(getchar() != '\n');
		
		scanf("%c",&c);
		
		first(result,c);
		
		printf("First (%c) { ",c);
		int k = 0;
		
		for(k = 0; result[k] != '\0'; k++){
			printf("%c ",result[k]);
		}
		
		printf("}\n");
		
		printf("Do you want to continue Y/N ?");
		
		while(getchar() != '\n');
		
		scanf("%c",&choice);
		
	} while(choice == 'y' || choice == 'Y');
	
	

}
	



//follow
#include<stdio.h>
#include<ctype.h>
#include<stdbool.h>
#include<string.h>
int size;
int m;
char result[20];
char productionSet[10][10];

void follow(char ch){
	
	if(productionSet[0][0] == ch){
		addToresultSet('$');
	}	
	
	int i,j;
	
	for(i = 0; i < size; i++){
		
		for(j = 2; productionSet[i][j] != '\0'; j++){
			
			if(productionSet[i][j] == ch){
				
				if(productionSet[i][j + 1] != '\0'){
					first(productionSet[i][j + 1]);
				} else {
					
					if(productionSet[i][0] != ch){
						follow(productionSet[i][0]);
					}
				}
					
			}	
			
		}	
		
	}
	
}

void first(char ch){
	
	if(!(isupper(ch))){
		addToresultSet(ch);
	}	
	
	int i,j;
	
	for(i = 0; i < size; i++){
		
		if(productionSet[i][0] == ch){
			
			if(productionSet[i][2] == '#'){
				follow(productionSet[i][0]);
			} else {
				first(productionSet[i][2]);
			}
			
		}	
		
	}
	
}

void addToresultSet(char ch){
	
	int k = 0;
	
	for(k = 0; k < m; k++){
		if(result[k] == ch) return;
	}
	
	result[m ++] = ch;
	
}

void main(){
	
	printf("Enter the number of productions: ");
	scanf("%d",&size);
	
	int i;
	
	for(i = 0; i < size; i++){
		printf("Enter the production %d: ", i + 1);
		scanf("%s",productionSet[i]);
	}
	
	
	char choice,c;
	
	do{
		m = 0;
		printf("Follow of : ");
		
		while(getchar() != '\n');
		
		scanf("%c",&c);
		
		follow(c);
		
		printf("Follow (%c) : { ",c);
		
		for(i = 0; i < m; i++){
			printf("%c ",result[i]);
		}
		printf(" }\n");
		
		printf("Do you want to continue Y/N? ");
		
		while(getchar() != '\n');
		
		scanf("%c",&choice);
		
			
		
	} while(choice == 'y'|| choice == 'Y');
	
	
}


//srp

#include<stdio.h>
#include<string.h>
struct pp{
char left[10];
char right[10];
};
int main()
{
	int i,j,k,stacklen,sublen,n,stacktop;
	char stack[20],temp[20],ch[2],input[20],*t1,*t2,*substring;
	struct pp rules[20];
	stack[0]='\0';
	printf("N=?");
	scanf("%d",&n);
	printf("grammer=?");
	for(i=0;i<n;i++)
{
	scanf("%s",temp);
	t1=strtok(temp,"->");
	t2=strtok(NULL,"->");
	strcpy(rules[i].left,t1);
	strcpy(rules[i].right,t2);
}
printf("input:?");
scanf("%s",input);
i=0;
while(1)
{
	if(i<strlen(input))
	{
		ch[0]=input[i];
		ch[1]='\0';
		i++;
		strcat(stack,ch);
		printf("%s\t",stack);
		for(k=i;k<strlen(input);k++)
		{
			printf("%c",input[k]);
		}
		printf("\tshift %s\n",ch);
	}
	for(j=0;j<n;j++)
	{
		substring=strstr(stack,rules[j].right);
		if(substring!=NULL)
		{
			stacklen=strlen(stack);
			sublen=strlen(substring);
			stacktop=stacklen-sublen;
			stack[stacktop]='\0';
			strcat(stack,rules[j].left);
		printf("%s\t",stack);
		for(k=i;k<strlen(input);k++)
		{
			printf("%c",input[k]);
		}
		printf("\treduce %s->%s\n",rules[j].left,rules[j].right);
		j=-1;
		}
	}
	if(strcmp(stack,rules[0].left)==0 && i==strlen(input))
	{
		printf("\naccepted");
		break;
	}
	if(i==strlen(input))
	{
		printf("\nnot accepted");
		break;
	}
}
}
	